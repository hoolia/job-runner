#!/bin/bash
set -a
ORIGINAL_JOB=$JOB

query_pods(){
  kubectl get pods --no-headers -a --selector=service=$JOB "$@" 2> /dev/null
}

oldest_pod(){
  query_pods -o=custom-columns=STATUS:.status.startTime,NAME:.metadata.name,CONTAINER_STATUS:.status.containerStatuses \
   | grep -v '\[\]' | sort | head -n1 | awk '{ print $2 }'
}

get_pod(){
  COMPLETED_PODS=$(query_pods | grep Completed)
  if [ -n "$COMPLETED_PODS" ]; then
    echo $COMPLETED_PODS | sort | head -n1 | awk '{ print $1 }'
  else
    oldest_pod
  fi
}

alert(){
  source /etc/default/$JOB
  export START=$(kubectl get job $job_name -o=template --template={{.status.startTime}} 2> /dev/null)
  export END=$(kubectl get job $job_name -o=template --template={{.status.completionTime}} 2> /dev/null)
  if [[ "$END" == "<no value>" ]]; then #Failure to launch results in nil completion
    END='' #allow alerter to set it to current time
  fi

  echo "[$JOB] Reaping @ [$OUTPUT] @ $END"

  if [ $ALERTER ]; then
      export POD_NAME=$pod
      . /app/alerters/$ALERTER
  fi
}

reap(){
  alert
  kubectl delete job $job_name &> /dev/null
  kubectl delete pod --selector=service=$JOB &> /dev/null  #delete job sometimes fails to delete the pods
}

# If job set. Reap that job
# Itereate over all finished jobs
if [ -z "$JOB" ] ; then
  all_jobs=($(kubectl get jobs -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
else
  all_jobs=($(kubectl get jobs --selector=service=${JOB} -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
fi

for job_name in "${all_jobs[@]}"
do
  #Get the original job name
  JOB=$(kubectl get jobs $job_name -o=jsonpath={.metadata.labels.service} 2> /dev/null)
  if [ -f "/etc/default/$JOB" ] ; then
    pod=$(get_pod)

    if [ -z "$pod" ]
    then
      STATUS="Unknown"; STATUS_CMD=-1
    else
      STATUS=$(kubectl get pod $pod -o=jsonpath={.status.phase} 2> /dev/null); STATUS_CMD=$?
    fi

    case $STATUS in
      Pending|Running )
        OUTPUT="$STATUS"
        SUCCEEDED=$(kubectl get jobs $job_name -o=jsonpath={.status.succeeded})
        if [[ $SUCCEEDED -gt 0 ]]; then
            OUTPUT="First pod failed to launch, but a subsequent pod claims completion."
            EXIT_CODE=98
            reap
        fi
      ;;
      Succeeded|Failed )
        EXIT_CODE=$(kubectl get pod $pod -o=jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')
        if ! [ "$EXIT_CODE" -eq "$EXIT_CODE" ]; then
          OUTPUT="Invalid EXIT_CODE [$EXIT_CODE]"
          EXIT_CODE=99
        else
          REASON=$(kubectl get pod $pod -o=jsonpath='{.status.containerStatuses[0].state.terminated.reason}')
          if [[ "$REASON" == "OOMKilled" ]]; then
            EXIT_CODE=137
          fi
          OUTPUT="$STATUS with exit code [$EXIT_CODE] for [$REASON]"

          if [ "$EXIT_CODE" -gt "-1" ]; then
            reap
          fi
        fi
      ;;
      * )
        STATUS="Unknown"
        if [[ $STATUS_CMD -ne 0 ]]; then
          OUTPUT="Failure to get phase"
          SUCCEEDED=$(kubectl get jobs $job_name -o=jsonpath={.status.succeeded})
          if [[ $SUCCEEDED -gt 0 ]]; then
            OUTPUT="Pods missing, but job reports succeeded"
            reap
          fi
        else
          OUTPUT="Unknown Status for Job [$STATUS] - The pod has likely been deleted"
          EXIT_CODE=404
        fi
      ;;
    esac
  fi
done

JOB=$ORIGINAL_JOB
